{"ast":null,"code":"import _classCallCheck from \"/Users/apple/Documents/AccessControlSoft/accesscontrolsoft/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/apple/Documents/AccessControlSoft/accesscontrolsoft/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Router } from '@angular/router';\nimport { Menssage, RoutersLink } from '../models/router';\nimport { AlertService } from './alert.service';\nimport { HttpsService } from './https.service';\nimport { LocalstoreService } from './localstore.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./https.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./localstore.service\";\nimport * as i4 from \"./alert.service\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(registeresquest, route, localStore, alert) {\n      _classCallCheck(this, AuthService);\n\n      this.registeresquest = registeresquest;\n      this.route = route;\n      this.localStore = localStore;\n      this.alert = alert;\n      this.customerDetail = [];\n      this.losgUsers = [{\n        id: 0,\n        name: '',\n        surname: '',\n        description: '',\n        data: '',\n        table: '',\n        ip: '',\n        information: '',\n        created_at: ''\n      }];\n      this.usersData = this.localStore.getSuccessLogin();\n      this.customerDetail = this.localStore.getItem(Menssage.customerDetail);\n    }\n\n    _createClass(AuthService, [{\n      key: \"getData\",\n      value: function getData() {\n        return this.losgUsers.slice();\n      }\n    }, {\n      key: \"create\",\n      value: function create(inform) {\n        var data = {\n          businessName: inform.businessName,\n          identificationCard: inform.identificationCard,\n          idCategoryToRegister: inform.idCategoryToRegister,\n          address: inform.address,\n          phone: inform.phone,\n          email: inform.email,\n          password: \"sumateClaro\",\n          password_confirmation: \"sumateClaro\",\n          idCity: inform.idCity\n        };\n        return this.registeresquest.POST(RoutersLink.register, data);\n      }\n    }, {\n      key: \"resgisterImageEvents\",\n      value: function resgisterImageEvents(inform) {\n        return this.registeresquest.POST(RoutersLink.resgisterImageEvents, inform);\n      }\n    }, {\n      key: \"createInstitution\",\n      value: function createInstitution(inform) {\n        return this.registeresquest.POST(RoutersLink.getEventPost, inform);\n      }\n    }, {\n      key: \"createCustomer\",\n      value: function createCustomer(inform) {\n        return this.registeresquest.POST(RoutersLink.customerDetailPost, inform);\n      }\n    }, {\n      key: \"createAssignUserAuditPost\",\n      value: function createAssignUserAuditPost(inform) {\n        return this.registeresquest.POST(RoutersLink.assignUserAuditPost, inform);\n      }\n    }, {\n      key: \"createSupervisor\",\n      value: function createSupervisor(inform) {\n        return this.registeresquest.POST(RoutersLink.register, inform);\n      }\n    }, {\n      key: \"createAccessPointRecord\",\n      value: function createAccessPointRecord(inform) {\n        return this.registeresquest.POST(RoutersLink.accessPointRecord, inform);\n      }\n    }, {\n      key: \"login\",\n      value: function login(inform) {\n        return this.registeresquest.POST(RoutersLink.loginApi, inform);\n      }\n    }, {\n      key: \"createtOperator\",\n      value: function createtOperator(inform) {\n        return this.registeresquest.POST(RoutersLink.operatorPost, inform);\n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        this.localStore.clear();\n        this.route.navigate([RoutersLink.login]);\n      }\n    }, {\n      key: \"cerra\",\n      value: function cerra() {\n        this.alert.messagefin();\n\n        if (this.usersData.user.idrol == 1) {\n          console.log(\"uno\");\n          localStorage.removeItem('token');\n          this.route.navigate([RoutersLink.login]);\n        } else {\n          console.log(\"dos\");\n          this.route.navigate([RoutersLink.loginClients + this.customerDetail.api_token]);\n          localStorage.removeItem('token');\n        }\n      }\n    }, {\n      key: \"getCity\",\n      value: function getCity() {\n        return this.registeresquest.GET(RoutersLink.city);\n      }\n    }, {\n      key: \"getOperator\",\n      value: function getOperator(item) {\n        return this.registeresquest.GET(RoutersLink.operator + item);\n      }\n    }, {\n      key: \"getAssignUserAudit\",\n      value: function getAssignUserAudit(item) {\n        return this.registeresquest.GET(RoutersLink.assignUserAudit + item);\n      }\n    }, {\n      key: \"accessPointRecordUpdate\",\n      value: function accessPointRecordUpdate(id, inform) {\n        return this.registeresquest.PUT(RoutersLink.accessPointRecordUpdate + id, inform);\n      }\n    }, {\n      key: \"assignUserAuditReady\",\n      value: function assignUserAuditReady(item) {\n        return this.registeresquest.GET(RoutersLink.assignUserAuditReady + item);\n      }\n    }, {\n      key: \"initialRegistrationReady\",\n      value: function initialRegistrationReady(item) {\n        return this.registeresquest.GET(RoutersLink.initialRegistrationReady + item);\n      }\n    }, {\n      key: \"getSupervisor\",\n      value: function getSupervisor(item) {\n        return this.registeresquest.POST(RoutersLink.indexgetgoin, item);\n      }\n    }, {\n      key: \"getStatus\",\n      value: function getStatus(item) {\n        return this.registeresquest.GET(RoutersLink.status + item);\n      }\n    }, {\n      key: \"getUsers\",\n      value: function getUsers() {\n        return this.registeresquest.GET(\"user\");\n      }\n    }, {\n      key: \"getUsersData\",\n      value: function getUsersData(item) {\n        return this.registeresquest.GET(RoutersLink.getUsersData + item);\n      }\n    }, {\n      key: \"getCustomerDetail\",\n      value: function getCustomerDetail(item) {\n        return this.registeresquest.GET(RoutersLink.customerDetail + item);\n      }\n    }, {\n      key: \"gettotal\",\n      value: function gettotal(item, search) {\n        return this.registeresquest.GET(RoutersLink.gettotal + item + '&buscar=' + search);\n      }\n    }, {\n      key: \"getmenu\",\n      value: function getmenu(item) {\n        return this.registeresquest.GET(RoutersLink.menu + item);\n      }\n    }, {\n      key: \"gettotaldatagallery\",\n      value: function gettotaldatagallery(item) {\n        return this.registeresquest.GET(RoutersLink.gettotaldatagallery + item);\n      }\n    }, {\n      key: \"getEvent\",\n      value: function getEvent(item) {\n        return this.registeresquest.GET(RoutersLink.getEvent);\n      }\n    }, {\n      key: \"getEventList\",\n      value: function getEventList(item) {\n        return this.registeresquest.GET(RoutersLink.getEventList + item);\n      }\n    }, {\n      key: \"getListCustomer\",\n      value: function getListCustomer(item) {\n        return this.registeresquest.GET(RoutersLink.listCustomer + item);\n      }\n    }, {\n      key: \"getListUsers\",\n      value: function getListUsers(item) {\n        return this.registeresquest.GET(RoutersLink.listUsers + item);\n      }\n    }, {\n      key: \"getEventListno\",\n      value: function getEventListno(item, idClientsProjects) {\n        var data = {\n          idEducationalInstitutions: item,\n          idProyectsClients: idClientsProjects\n        };\n        return this.registeresquest.POST(RoutersLink.getEventList, data);\n      }\n    }, {\n      key: \"gettotaldata\",\n      value: function gettotaldata(item) {\n        return this.registeresquest.GET(RoutersLink.gettotaldata + item);\n      }\n    }, {\n      key: \"gettotaldataDelete\",\n      value: function gettotaldataDelete(item) {\n        return this.registeresquest.GET(RoutersLink.gettotaldataDelete + item);\n      }\n    }, {\n      key: \"deleteRegisterImageEvent\",\n      value: function deleteRegisterImageEvent(item) {\n        return this.registeresquest.GET(RoutersLink.deleteRegisterImageEvent + item);\n      }\n    }, {\n      key: \"getEventImg\",\n      value: function getEventImg(item, itemEvent) {\n        return this.registeresquest.GET(RoutersLink.getEventImg + item + '&idevento=' + itemEvent);\n      }\n    }, {\n      key: \"getCategory\",\n      value: function getCategory() {\n        return this.registeresquest.GET(RoutersLink.category);\n      }\n    }, {\n      key: \"getBenefits\",\n      value: function getBenefits() {\n        return this.registeresquest.GET(RoutersLink.benefits);\n      }\n    }, {\n      key: \"getScale\",\n      value: function getScale() {\n        return this.registeresquest.GET(RoutersLink.scale);\n      }\n    }, {\n      key: \"getChallenges\",\n      value: function getChallenges() {\n        return this.registeresquest.GET(RoutersLink.challenges);\n      }\n    }, {\n      key: \"forgotPassword\",\n      value: function forgotPassword(item) {\n        return this.registeresquest.GET(RoutersLink.forgotPassword + item);\n      }\n    }, {\n      key: \"createExpoalidos\",\n      value: function createExpoalidos(inform) {\n        var data = {\n          businessName: inform.businessName,\n          identificationCard: inform.identificationCard,\n          idCategoryToRegister: inform.idCategoryToRegister,\n          address: inform.address,\n          phone: inform.phone,\n          email: inform.email,\n          monthlyBudget: inform.monthlyBudget,\n          contactPerson: inform.contactPerson,\n          terms: inform.terms,\n          legalRepresentatives: inform.terms\n        };\n        return this.registeresquest.POST(RoutersLink.registerExpoAllies, data);\n      }\n    }, {\n      key: \"createChallenge\",\n      value: function createChallenge(inform) {\n        var formData = new FormData();\n        formData.append(\"file\", inform.file);\n        formData.append(\"businessDescription\", inform.description);\n        formData.append(\"nit\", inform.nit);\n        formData.append(\"businessName\", inform.businessName);\n        formData.append(\"nameWorks\", inform.name);\n        formData.append(\"numberContact\", inform.numberContact);\n        formData.append(\"typeCategory\", inform.typeCategory);\n        return this.registeresquest.POST(RoutersLink.registerChallenge, formData);\n      }\n    }, {\n      key: \"createEditUsers\",\n      value: function createEditUsers(inform) {\n        var data = {\n          businessName: inform.businessName,\n          identificationCard: inform.identificationCard,\n          idCategoryToRegister: inform.idCategoryToRegister,\n          address: inform.address,\n          phone: inform.phone,\n          email: inform.email,\n          idCity: inform.idCity,\n          businessDescription: inform.businessDescription,\n          contactPerson: inform.contactPerson,\n          telephoneContact: inform.telephoneContact,\n          legalRepresentatives: inform.legalRepresentatives,\n          password: inform.password,\n          id: inform.id\n        };\n        return this.registeresquest.POST(RoutersLink.registerUpdate, data);\n      }\n    }, {\n      key: \"createUpdatePassword\",\n      value: function createUpdatePassword(inform) {\n        var data = {\n          id: inform.id,\n          email: inform.email,\n          password: inform.password\n        };\n        return this.registeresquest.POST(RoutersLink.passwordUpdate, data);\n      }\n    }, {\n      key: \"createImgUpdate\",\n      value: function createImgUpdate(inform) {\n        var formData = new FormData();\n        formData.append(\"file\", inform.file);\n        formData.append(\"id\", inform.id);\n        return this.registeresquest.POST(RoutersLink.imgUpdate, formData);\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpsService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.LocalstoreService), i0.ɵɵinject(i4.AlertService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}